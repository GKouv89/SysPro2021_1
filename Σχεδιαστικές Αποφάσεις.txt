Σχεδιαστικές Αποφάσεις 
  Προσωρινή Δομή Πληθυσμού:
    Για συγκεκριμένο ιό, θα ψάχνουμε στην λίστα του και κάθε φορά που πετυχαίνουμε
    χώρα για πρώτη φορά θα δημιουργούμε struct που θα κρατά πόσοι έχουν εμβολιαστεί
    σε αυτό το διάστημα από αυτή την χώρα. αν την ξαναπετύχουμε, ανανεώνουμε.
    Μετά θα πηγαίνουμε στην ίδια την χώρα και θα βγάζουμε από τους 4 πληθυσμούς τον
    συνολικό και μετά το ratio. Άρα, struct με ptr σε χώρα και long unsigned int

Πράγματα που μένει να σκεφτώ:
[X] Είναι αρκετή μία από τις 2 hash functions που χρησιμοποιούνται μέσα στην hash_i 
για να hashαρουμε τις χώρες και τους ιούς; 
[X] Ποια είναι τα inconsistency cases και που λύνεται το κάθε ένα από αυτά?
  [X] Εγγραφή με NO ΑΛΛΑ με ημερομηνία δίπλα: επί τόπου όσο parseαρεται
  [X] Εγγραφή που ήδη υπάρχει σε ένα skiplist: Αν και επιστρέφουμε error code,
    πρέπει να επιστρέψουμε και ημερομηνία λογικά στις περιπτώσεις insertCitizenRecord και vaccinateNow.
    Άρα η συνάρτηση search στο linkedlist.c και search_skip στο skiplist.c πρέπει να έχουν ένα ακόμα arguement.
  [] Εγγραφή με YES και ημερομηνία ΑΛΛΑ ΡΗΤΑ ο πολίτης είναι στην λίστα των μη εμβολιασμένων για τον ιό.
[X] Αν βρω duplicate όσο παρσάρω το αρχείο, πρέπει να γράφω ERROR στο output?

False positive σε bloom filter: μας λέει ότι κατά πάσα πιθανότητα υπάρχει στην skiplist, ενώ μπορεί να *μην* υπάρχει
Άρα, αν πάμε να αναζητήσουμε γρήγορα μέσω του bloomFilter αν ο εμβολιαζόμενος υπάρχει, αν επιστρέψει ΌΧΙ μπορούμε να
εκτυπώσουμε NOT VACCINATED, αν επιστρέψει ναι, καλό είναι να κοιτάξουμε και την λίστα. Στην εισαγωγή ΔΕΝ έχει νόημα
να το χρησιμοποιήσουμε όμως